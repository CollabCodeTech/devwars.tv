/*  ========================================================================
	02. Mixins
	======================================================================== */

@mixin size($width, $height: $width) {
	height: $height;
	width: $width;
}

@mixin triangle($direction, $size, $color){
	content: '';
	display: block;
	position: absolute;
	height: 0; width: 0;

	@if ($direction == 'up'){
		border-bottom: $size solid $color;
		border-left: 1/2*$size solid transparent;
		border-right: 1/2*$size solid transparent;
	}
	@else if ($direction == 'down'){
		border-top: $size solid $color;
		border-left: 1/2*$size solid transparent;
		border-right: 1/2*$size solid transparent;
	}
	@else if ($direction == 'left'){
		border-top: 1/2*$size solid transparent;
		border-bottom: 1/2*$size solid transparent;
		border-right: $size solid $color;
	}
	@else if ($direction == 'right'){
		border-top: 1/2*$size solid transparent;
		border-bottom: 1/2*$size solid transparent;
		border-left: $size solid $color;
	}
}

@mixin aspect-ratio($width, $height) {
    position: relative;
    &:before {
        display: block;
        content: "";
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }
    > .aspect {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border: 0;
    }
}

@mixin clear-position {
    position: relative;
    top: auto; right: auto;
    left: auto; bottom: auto;
    transform: none;
}

@mixin clear-aspect-ratio {
    &:before {
        display: none;
    }
}

@mixin normalize-row($breakpoint : xs) {
    & > [class*='col-'] {
        padding-left: $grid-gutter-part / 2;
        padding-right: $grid-gutter-part / 2;

        @include breakpoint($breakpoint) {
            padding-left: $grid-gutter-part;
            padding-right: $grid-gutter-part;
        }

        &:first-child {
            padding-left: $grid-gutter-part;
        }

        &:last-child {
            padding-right: $grid-gutter-part;
        }
    }
}

@mixin material($depth : 1) {
    @if $depth == 1 {
        box-shadow: 0 1px 3px rgba(0,0,0,0.12);
    } @else if $depth == 2 {
        box-shadow: 0 3px 6px rgba(0,0,0,0.16);
    } @else if $depth == 3 {
        box-shadow: 0 10px 20px rgba(0,0,0,0.19);
    } @else if $depth == 4 {
        box-shadow: 0 14px 28px rgba(0,0,0,0.25);
    } @else if $depth == 5 {
        box-shadow: 0 19px 38px rgba(0,0,0,0.30);
    }
}

@mixin linear-gradient($direction, $color-stops...) {
    background: nth(nth($color-stops, 1), 1);
    background: linear-gradient($direction, $color-stops);
}





@mixin button-variant($color, $background, $border) {
    $active-background: darken($background, 10%);
    $active-border: darken($border, 12%);
    color: $color;
    background-color: $background;
    border-color: $border;

    &:focus,
    &.focus {
        color: $color;
        background-color: $active-background;
        border-color: $active-border;
    }

    &:active,
    &.active,
    .open > &.dropdown-toggle {
        color: $color;
        background-color: $active-background;
        border-color: $active-border;
        background-image: none;

        &:hover,
        &:focus,
        &.focus {
            color: $color;
            background-color: darken($background, 16%);
            border-color: darken($background, 16%);
        }
    }

    &:hover {
        color: $color;
        background-color: darken($background, 8%);
        border-color: darken($background, 8%);
    }

    &.disabled,
    &:disabled {
        &:focus,
        &.focus {
            background-color: $background;
            border-color: $border;
        }
    }
}

@mixin button-outline-variant($color) {
    color: $color;
    background-image: none;
    background-color: transparent;
    border-color: $color;

    &:focus,
    &.focus {
        color: #fff;
        background-color: $color;
        border-color: $color;
    }

    &:active,
    &.active,
    .open > &.dropdown-toggle {
        color: #fff;
        background-color: $color;
        border-color: $color;

        &:hover,
        &:focus,
        &.focus {
            color: #fff;
            background-color: darken($color, 8%);
            border-color: darken($color, 8%);
        }
    }

    &.disabled,
    &:disabled {
        &:focus,
        &.focus {
            border-color: lighten($color, 20%);
        }
    }

    &:hover {
        color: #fff;
        background-color: $color;
        border-color: $color;
    }
}

@mixin breakpoint($point) {
    @if $point == xs {
        @media (max-width: map-get($grid-breakpoints, sm))
        { @content }
    }
    @if $point == sm {
        @media (max-width: map-get($grid-breakpoints, md))
        { @content }
    }
    @if $point == md {
        @media (max-width: map-get($grid-breakpoints, lg))
        { @content }
    }
    @if $point == lg {
        @media (max-width: map-get($grid-breakpoints, xl))
        { @content }
    }
}

@include breakpoint(xs) {}
@include breakpoint(sm) {}
@include breakpoint(md) {}
@include breakpoint(lg) {}


/* ==========================================================================
01.1 BS4 Grid Dependancy
========================================================================== */

@mixin _assert-ascending($map, $map-name) {
    $prev-key: null;
    $prev-num: null;
    @each $key, $num in $map {
        @if $prev-num == null {
            // Do nothing
        } @else if not comparable($prev-num, $num) {
            @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
        } @else if $prev-num >= $num {
            @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
        }
        $prev-key: $key;
        $prev-num: $num;
    }
}

@include _assert-ascending($grid-breakpoints, "$grid-breakpoints");
@include _assert-ascending($container-max-widths, "$container-max-widths");

/* ==========================================================================
01.2 BS4 Breakpoints
========================================================================== */

@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
    @include media-breakpoint-up($name, $breakpoints) {
        @include media-breakpoint-down($name, $breakpoints) {
            @content;
        }
    }
}

@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
    @include media-breakpoint-up($lower, $breakpoints) {
        @include media-breakpoint-down($upper, $breakpoints) {
            @content;
        }
    }
}


/* ==========================================================================
01.3 BS4 Grid System
========================================================================== */

@mixin make-container($gutter: $grid-gutter-width) {
    @extend %clear; //not in bootstrap
    margin-left: auto;
    margin-right: auto;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $container-max-width in $max-widths {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
            max-width: $container-max-width;
        }
    }
}

@mixin make-row($gutter: $grid-gutter-width) {
    @extend %clear;
    margin-left:  ($gutter / -2);
    margin-right: ($gutter / -2);
}

@mixin make-col-ready($size, $columns: $grid-columns, $gutter: $grid-gutter-width) {
    min-height: 1px;
    padding-right: ($gutter / 2);
    padding-left:  ($gutter / 2);
}

@mixin make-col($size, $columns: $grid-columns, $gutter: $grid-gutter-width) {
    float: left;
    width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
    margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
    left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
    right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
    // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
    @if $type == push {
        @include make-col-push($size, $columns);
    } @else if $type == pull {
        @include make-col-pull($size, $columns);
    } @else if $type == offset {
        @include make-col-offset($size, $columns);
    }
}

/* ==========================================================================
00. Bootstrap Framework
========================================================================== */

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {

    %grid-column {
        min-height: 1px;
        padding-right: ($gutter / 2);
        padding-left: ($gutter / 2);
    }

    $breakpoint-counter: 0;

    @each $breakpoint in map-keys($breakpoints) {
        $breakpoint-counter: ($breakpoint-counter + 1);

        @for $i from 1 through $columns {
            .col-#{$breakpoint}-#{$i} {
                @extend %grid-column;
        }
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
        @for $i from 1 through $columns {
            .col-#{$breakpoint}-#{$i} {
                float: left;
                width: percentage($i / $columns);
        }
    }

    @each $modifier in (pull, push) {
        @for $i from 0 through $columns {
            .#{$modifier}-#{$breakpoint}-#{$i} {
                @include make-col-modifier($modifier, $i, $columns)
                    }
}
}

@for $i from 0 through ($columns - 1) {
    @if $breakpoint-counter != 1 or $i != 0 {
        .offset-#{$breakpoint}-#{$i} {
            @include make-col-modifier(offset, $i, $columns)
                }
}
}
}
}
}
